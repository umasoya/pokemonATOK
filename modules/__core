# vim: set ft=bash :

#
# 世代数をkey、その世代のポケモンへのAPIエンドポイントをvalueとする
# 連想配列(URLS) を生成する
#
__core::fetch_urls()
{
  local -r _from=${1}
  local -r _to=${2}
  local -r _curl_option=$(__core::get_curl_option)

  for _gen in $(seq ${_from} ${_to}); do
    local _cmd="curl ${_curl_option} ${API}/generation/${_gen}/ | jq -r '.pokemon_species[] | .url' | sort -V"
    __utils::ifs_backup && __utils::ifs_newline
    __print::verbose ${_cmd}
    __utils::ifs_reset

    URLS[${_gen}]=$(eval ${_cmd})
  done

  return 0
}

__core::fetch_pokemons()
{
  local -r _total=$(echo "${URLS[@]}" | tr ' ' '\n' | wc -l)
  local -r _curl_option=$(__core::get_curl_option)
  local _i=0

  for _gen in ${!URLS[@]}; do
    POKEMONS[${_gen}]=""
    for _url in ${URLS[${_gen}]}; do
      local _cmd="curl ${_curl_option} ${_url} | jq -r '.names[] | select(.language.name == \"ja\") | .name'"

      __utils::ifs_backup && __utils::ifs_newline
      __print::verbose "${_cmd}"
      __utils::ifs_reset

      __utils::progress ${_i} ${_total}

      local _name=$(eval ${_cmd})

      POKEMONS[${_gen}]+="${_name} "
      ((_i++))
    done
  done

  __utils::progress ${_total} ${_total}
  return 0
}

__core::generate_filenames()
{
  if "${BUNDLE}"; then
    FILENAMES+=("${OUTPUT}")
    return 0
  fi

  for _gen in ${!URLS[@]}; do
    FILENAMES+=("${OUTPUT}_gen${_gen}")
  done

  return 0
}

__core::get_curl_option()
{
  if "${VERBOSE}" || "${DEBUG}"; then
    echo ""
  else
    echo "-s"
  fi
  return 0
}

__core::write()
{
  __utils::ifs_backup && __utils::ifs_newline
  for _line in ${BUFFER[@]}; do
    echo ${_line} >> 'test.txt'
  done
  __utils::ifs_reset

  return 0
}
